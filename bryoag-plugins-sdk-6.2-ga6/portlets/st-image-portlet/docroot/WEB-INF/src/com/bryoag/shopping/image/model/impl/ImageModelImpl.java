/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bryoag.shopping.image.model.impl;

import com.bryoag.shopping.image.model.Image;
import com.bryoag.shopping.image.model.ImageModel;
import com.bryoag.shopping.image.model.ImageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Image service. Represents a row in the &quot;skilltailor_Image&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bryoag.shopping.image.model.ImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImageImpl}.
 * </p>
 *
 * @author deepakgupta02
 * @see ImageImpl
 * @see com.bryoag.shopping.image.model.Image
 * @see com.bryoag.shopping.image.model.ImageModel
 * @generated
 */
@JSON(strict = true)
public class ImageModelImpl extends BaseModelImpl<Image> implements ImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a image model instance should use the {@link com.bryoag.shopping.image.model.Image} interface instead.
	 */
	public static final String TABLE_NAME = "skilltailor_Image";
	public static final Object[][] TABLE_COLUMNS = {
			{ "imageId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "assetId", Types.BIGINT },
			{ "assetType", Types.VARCHAR },
			{ "smallImagePath", Types.VARCHAR },
			{ "mediumImagePath", Types.VARCHAR },
			{ "largeImagePath", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table skilltailor_Image (imageId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assetId LONG,assetType VARCHAR(75) null,smallImagePath VARCHAR(75) null,mediumImagePath VARCHAR(75) null,largeImagePath VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table skilltailor_Image";
	public static final String ORDER_BY_JPQL = " ORDER BY image.imageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY skilltailor_Image.imageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bryoag.shopping.image.model.Image"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bryoag.shopping.image.model.Image"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bryoag.shopping.image.model.Image"),
			true);
	public static long ASSETID_COLUMN_BITMASK = 1L;
	public static long ASSETTYPE_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long IMAGEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Image toModel(ImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Image model = new ImageImpl();

		model.setImageId(soapModel.getImageId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAssetId(soapModel.getAssetId());
		model.setAssetType(soapModel.getAssetType());
		model.setSmallImagePath(soapModel.getSmallImagePath());
		model.setMediumImagePath(soapModel.getMediumImagePath());
		model.setLargeImagePath(soapModel.getLargeImagePath());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Image> toModels(ImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Image> models = new ArrayList<Image>(soapModels.length);

		for (ImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bryoag.shopping.image.model.Image"));

	public ImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _imageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _imageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Image.class;
	}

	@Override
	public String getModelClassName() {
		return Image.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("imageId", getImageId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("assetId", getAssetId());
		attributes.put("assetType", getAssetType());
		attributes.put("smallImagePath", getSmallImagePath());
		attributes.put("mediumImagePath", getMediumImagePath());
		attributes.put("largeImagePath", getLargeImagePath());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long assetId = (Long)attributes.get("assetId");

		if (assetId != null) {
			setAssetId(assetId);
		}

		String assetType = (String)attributes.get("assetType");

		if (assetType != null) {
			setAssetType(assetType);
		}

		String smallImagePath = (String)attributes.get("smallImagePath");

		if (smallImagePath != null) {
			setSmallImagePath(smallImagePath);
		}

		String mediumImagePath = (String)attributes.get("mediumImagePath");

		if (mediumImagePath != null) {
			setMediumImagePath(mediumImagePath);
		}

		String largeImagePath = (String)attributes.get("largeImagePath");

		if (largeImagePath != null) {
			setLargeImagePath(largeImagePath);
		}
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_columnBitmask = -1L;

		if (!_setOriginalImageId) {
			_setOriginalImageId = true;

			_originalImageId = _imageId;
		}

		_imageId = imageId;
	}

	public long getOriginalImageId() {
		return _originalImageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAssetId() {
		return _assetId;
	}

	@Override
	public void setAssetId(long assetId) {
		_columnBitmask |= ASSETID_COLUMN_BITMASK;

		if (!_setOriginalAssetId) {
			_setOriginalAssetId = true;

			_originalAssetId = _assetId;
		}

		_assetId = assetId;
	}

	public long getOriginalAssetId() {
		return _originalAssetId;
	}

	@JSON
	@Override
	public String getAssetType() {
		if (_assetType == null) {
			return StringPool.BLANK;
		}
		else {
			return _assetType;
		}
	}

	@Override
	public void setAssetType(String assetType) {
		_columnBitmask |= ASSETTYPE_COLUMN_BITMASK;

		if (_originalAssetType == null) {
			_originalAssetType = _assetType;
		}

		_assetType = assetType;
	}

	public String getOriginalAssetType() {
		return GetterUtil.getString(_originalAssetType);
	}

	@JSON
	@Override
	public String getSmallImagePath() {
		if (_smallImagePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _smallImagePath;
		}
	}

	@Override
	public void setSmallImagePath(String smallImagePath) {
		_smallImagePath = smallImagePath;
	}

	@JSON
	@Override
	public String getMediumImagePath() {
		if (_mediumImagePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _mediumImagePath;
		}
	}

	@Override
	public void setMediumImagePath(String mediumImagePath) {
		_mediumImagePath = mediumImagePath;
	}

	@JSON
	@Override
	public String getLargeImagePath() {
		if (_largeImagePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _largeImagePath;
		}
	}

	@Override
	public void setLargeImagePath(String largeImagePath) {
		_largeImagePath = largeImagePath;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Image.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Image toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Image)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImageImpl imageImpl = new ImageImpl();

		imageImpl.setImageId(getImageId());
		imageImpl.setGroupId(getGroupId());
		imageImpl.setCompanyId(getCompanyId());
		imageImpl.setUserId(getUserId());
		imageImpl.setUserName(getUserName());
		imageImpl.setCreateDate(getCreateDate());
		imageImpl.setModifiedDate(getModifiedDate());
		imageImpl.setAssetId(getAssetId());
		imageImpl.setAssetType(getAssetType());
		imageImpl.setSmallImagePath(getSmallImagePath());
		imageImpl.setMediumImagePath(getMediumImagePath());
		imageImpl.setLargeImagePath(getLargeImagePath());

		imageImpl.resetOriginalValues();

		return imageImpl;
	}

	@Override
	public int compareTo(Image image) {
		int value = 0;

		if (getImageId() < image.getImageId()) {
			value = -1;
		}
		else if (getImageId() > image.getImageId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Image)) {
			return false;
		}

		Image image = (Image)obj;

		long primaryKey = image.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ImageModelImpl imageModelImpl = this;

		imageModelImpl._originalImageId = imageModelImpl._imageId;

		imageModelImpl._setOriginalImageId = false;

		imageModelImpl._originalGroupId = imageModelImpl._groupId;

		imageModelImpl._setOriginalGroupId = false;

		imageModelImpl._originalCompanyId = imageModelImpl._companyId;

		imageModelImpl._setOriginalCompanyId = false;

		imageModelImpl._originalAssetId = imageModelImpl._assetId;

		imageModelImpl._setOriginalAssetId = false;

		imageModelImpl._originalAssetType = imageModelImpl._assetType;

		imageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Image> toCacheModel() {
		ImageCacheModel imageCacheModel = new ImageCacheModel();

		imageCacheModel.imageId = getImageId();

		imageCacheModel.groupId = getGroupId();

		imageCacheModel.companyId = getCompanyId();

		imageCacheModel.userId = getUserId();

		imageCacheModel.userName = getUserName();

		String userName = imageCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			imageCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			imageCacheModel.createDate = createDate.getTime();
		}
		else {
			imageCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			imageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			imageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		imageCacheModel.assetId = getAssetId();

		imageCacheModel.assetType = getAssetType();

		String assetType = imageCacheModel.assetType;

		if ((assetType != null) && (assetType.length() == 0)) {
			imageCacheModel.assetType = null;
		}

		imageCacheModel.smallImagePath = getSmallImagePath();

		String smallImagePath = imageCacheModel.smallImagePath;

		if ((smallImagePath != null) && (smallImagePath.length() == 0)) {
			imageCacheModel.smallImagePath = null;
		}

		imageCacheModel.mediumImagePath = getMediumImagePath();

		String mediumImagePath = imageCacheModel.mediumImagePath;

		if ((mediumImagePath != null) && (mediumImagePath.length() == 0)) {
			imageCacheModel.mediumImagePath = null;
		}

		imageCacheModel.largeImagePath = getLargeImagePath();

		String largeImagePath = imageCacheModel.largeImagePath;

		if ((largeImagePath != null) && (largeImagePath.length() == 0)) {
			imageCacheModel.largeImagePath = null;
		}

		return imageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{imageId=");
		sb.append(getImageId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", assetId=");
		sb.append(getAssetId());
		sb.append(", assetType=");
		sb.append(getAssetType());
		sb.append(", smallImagePath=");
		sb.append(getSmallImagePath());
		sb.append(", mediumImagePath=");
		sb.append(getMediumImagePath());
		sb.append(", largeImagePath=");
		sb.append(getLargeImagePath());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.bryoag.shopping.image.model.Image");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetId</column-name><column-value><![CDATA[");
		sb.append(getAssetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetType</column-name><column-value><![CDATA[");
		sb.append(getAssetType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImagePath</column-name><column-value><![CDATA[");
		sb.append(getSmallImagePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mediumImagePath</column-name><column-value><![CDATA[");
		sb.append(getMediumImagePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>largeImagePath</column-name><column-value><![CDATA[");
		sb.append(getLargeImagePath());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Image.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Image.class };
	private long _imageId;
	private long _originalImageId;
	private boolean _setOriginalImageId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _assetId;
	private long _originalAssetId;
	private boolean _setOriginalAssetId;
	private String _assetType;
	private String _originalAssetType;
	private String _smallImagePath;
	private String _mediumImagePath;
	private String _largeImagePath;
	private long _columnBitmask;
	private Image _escapedModel;
}