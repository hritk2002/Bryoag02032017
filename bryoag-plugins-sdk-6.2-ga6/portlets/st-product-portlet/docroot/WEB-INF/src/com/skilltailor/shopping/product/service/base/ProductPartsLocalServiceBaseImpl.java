/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.skilltailor.shopping.product.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.skilltailor.shopping.product.model.ProductParts;
import com.skilltailor.shopping.product.service.ProductPartsLocalService;
import com.skilltailor.shopping.product.service.persistence.ProductPartsPersistence;
import com.skilltailor.shopping.product.service.persistence.ProductPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the product parts local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.skilltailor.shopping.product.service.impl.ProductPartsLocalServiceImpl}.
 * </p>
 *
 * @author deepakgupta02
 * @see com.skilltailor.shopping.product.service.impl.ProductPartsLocalServiceImpl
 * @see com.skilltailor.shopping.product.service.ProductPartsLocalServiceUtil
 * @generated
 */
public abstract class ProductPartsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ProductPartsLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.skilltailor.shopping.product.service.ProductPartsLocalServiceUtil} to access the product parts local service.
	 */

	/**
	 * Adds the product parts to the database. Also notifies the appropriate model listeners.
	 *
	 * @param productParts the product parts
	 * @return the product parts that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProductParts addProductParts(ProductParts productParts)
		throws SystemException {
		productParts.setNew(true);

		return productPartsPersistence.update(productParts);
	}

	/**
	 * Creates a new product parts with the primary key. Does not add the product parts to the database.
	 *
	 * @param partId the primary key for the new product parts
	 * @return the new product parts
	 */
	@Override
	public ProductParts createProductParts(long partId) {
		return productPartsPersistence.create(partId);
	}

	/**
	 * Deletes the product parts with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param partId the primary key of the product parts
	 * @return the product parts that was removed
	 * @throws PortalException if a product parts with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProductParts deleteProductParts(long partId)
		throws PortalException, SystemException {
		return productPartsPersistence.remove(partId);
	}

	/**
	 * Deletes the product parts from the database. Also notifies the appropriate model listeners.
	 *
	 * @param productParts the product parts
	 * @return the product parts that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProductParts deleteProductParts(ProductParts productParts)
		throws SystemException {
		return productPartsPersistence.remove(productParts);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ProductParts.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return productPartsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.skilltailor.shopping.product.model.impl.ProductPartsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return productPartsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.skilltailor.shopping.product.model.impl.ProductPartsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return productPartsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return productPartsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return productPartsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ProductParts fetchProductParts(long partId)
		throws SystemException {
		return productPartsPersistence.fetchByPrimaryKey(partId);
	}

	/**
	 * Returns the product parts with the primary key.
	 *
	 * @param partId the primary key of the product parts
	 * @return the product parts
	 * @throws PortalException if a product parts with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ProductParts getProductParts(long partId)
		throws PortalException, SystemException {
		return productPartsPersistence.findByPrimaryKey(partId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return productPartsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the product partses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.skilltailor.shopping.product.model.impl.ProductPartsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of product partses
	 * @param end the upper bound of the range of product partses (not inclusive)
	 * @return the range of product partses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ProductParts> getProductPartses(int start, int end)
		throws SystemException {
		return productPartsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of product partses.
	 *
	 * @return the number of product partses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getProductPartsesCount() throws SystemException {
		return productPartsPersistence.countAll();
	}

	/**
	 * Updates the product parts in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param productParts the product parts
	 * @return the product parts that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProductParts updateProductParts(ProductParts productParts)
		throws SystemException {
		return productPartsPersistence.update(productParts);
	}

	/**
	 * Returns the product local service.
	 *
	 * @return the product local service
	 */
	public com.skilltailor.shopping.product.service.ProductLocalService getProductLocalService() {
		return productLocalService;
	}

	/**
	 * Sets the product local service.
	 *
	 * @param productLocalService the product local service
	 */
	public void setProductLocalService(
		com.skilltailor.shopping.product.service.ProductLocalService productLocalService) {
		this.productLocalService = productLocalService;
	}

	/**
	 * Returns the product remote service.
	 *
	 * @return the product remote service
	 */
	public com.skilltailor.shopping.product.service.ProductService getProductService() {
		return productService;
	}

	/**
	 * Sets the product remote service.
	 *
	 * @param productService the product remote service
	 */
	public void setProductService(
		com.skilltailor.shopping.product.service.ProductService productService) {
		this.productService = productService;
	}

	/**
	 * Returns the product persistence.
	 *
	 * @return the product persistence
	 */
	public ProductPersistence getProductPersistence() {
		return productPersistence;
	}

	/**
	 * Sets the product persistence.
	 *
	 * @param productPersistence the product persistence
	 */
	public void setProductPersistence(ProductPersistence productPersistence) {
		this.productPersistence = productPersistence;
	}

	/**
	 * Returns the product parts local service.
	 *
	 * @return the product parts local service
	 */
	public com.skilltailor.shopping.product.service.ProductPartsLocalService getProductPartsLocalService() {
		return productPartsLocalService;
	}

	/**
	 * Sets the product parts local service.
	 *
	 * @param productPartsLocalService the product parts local service
	 */
	public void setProductPartsLocalService(
		com.skilltailor.shopping.product.service.ProductPartsLocalService productPartsLocalService) {
		this.productPartsLocalService = productPartsLocalService;
	}

	/**
	 * Returns the product parts remote service.
	 *
	 * @return the product parts remote service
	 */
	public com.skilltailor.shopping.product.service.ProductPartsService getProductPartsService() {
		return productPartsService;
	}

	/**
	 * Sets the product parts remote service.
	 *
	 * @param productPartsService the product parts remote service
	 */
	public void setProductPartsService(
		com.skilltailor.shopping.product.service.ProductPartsService productPartsService) {
		this.productPartsService = productPartsService;
	}

	/**
	 * Returns the product parts persistence.
	 *
	 * @return the product parts persistence
	 */
	public ProductPartsPersistence getProductPartsPersistence() {
		return productPartsPersistence;
	}

	/**
	 * Sets the product parts persistence.
	 *
	 * @param productPartsPersistence the product parts persistence
	 */
	public void setProductPartsPersistence(
		ProductPartsPersistence productPartsPersistence) {
		this.productPartsPersistence = productPartsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.skilltailor.shopping.product.model.ProductParts",
			productPartsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.skilltailor.shopping.product.model.ProductParts");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ProductParts.class;
	}

	protected String getModelClassName() {
		return ProductParts.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = productPartsPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.skilltailor.shopping.product.service.ProductLocalService.class)
	protected com.skilltailor.shopping.product.service.ProductLocalService productLocalService;
	@BeanReference(type = com.skilltailor.shopping.product.service.ProductService.class)
	protected com.skilltailor.shopping.product.service.ProductService productService;
	@BeanReference(type = ProductPersistence.class)
	protected ProductPersistence productPersistence;
	@BeanReference(type = com.skilltailor.shopping.product.service.ProductPartsLocalService.class)
	protected com.skilltailor.shopping.product.service.ProductPartsLocalService productPartsLocalService;
	@BeanReference(type = com.skilltailor.shopping.product.service.ProductPartsService.class)
	protected com.skilltailor.shopping.product.service.ProductPartsService productPartsService;
	@BeanReference(type = ProductPartsPersistence.class)
	protected ProductPartsPersistence productPartsPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ProductPartsLocalServiceClpInvoker _clpInvoker = new ProductPartsLocalServiceClpInvoker();
}