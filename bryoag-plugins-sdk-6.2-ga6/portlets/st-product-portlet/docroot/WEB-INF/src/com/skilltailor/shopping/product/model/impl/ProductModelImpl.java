/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.skilltailor.shopping.product.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.skilltailor.shopping.product.model.Product;
import com.skilltailor.shopping.product.model.ProductModel;
import com.skilltailor.shopping.product.model.ProductSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Product service. Represents a row in the &quot;skilltailor_Product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.skilltailor.shopping.product.model.ProductModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductImpl}.
 * </p>
 *
 * @author deepakgupta02
 * @see ProductImpl
 * @see com.skilltailor.shopping.product.model.Product
 * @see com.skilltailor.shopping.product.model.ProductModel
 * @generated
 */
@JSON(strict = true)
public class ProductModelImpl extends BaseModelImpl<Product>
	implements ProductModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the {@link com.skilltailor.shopping.product.model.Product} interface instead.
	 */
	public static final String TABLE_NAME = "skilltailor_Product";
	public static final Object[][] TABLE_COLUMNS = {
			{ "productId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "categoryId", Types.BIGINT },
			{ "sku", Types.VARCHAR },
			{ "productName", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "basicCost", Types.INTEGER },
			{ "shippingCost", Types.INTEGER },
			{ "totalQuantity", Types.INTEGER },
			{ "minQuantity", Types.INTEGER },
			{ "maxQuantity", Types.INTEGER },
			{ "taxable", Types.BOOLEAN },
			{ "stockChecking", Types.BOOLEAN },
			{ "discount", Types.DOUBLE },
			{ "imageId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table skilltailor_Product (productId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryId LONG,sku VARCHAR(75) null,productName VARCHAR(75) null,description VARCHAR(75) null,basicCost INTEGER,shippingCost INTEGER,totalQuantity INTEGER,minQuantity INTEGER,maxQuantity INTEGER,taxable BOOLEAN,stockChecking BOOLEAN,discount DOUBLE,imageId LONG)";
	public static final String TABLE_SQL_DROP = "drop table skilltailor_Product";
	public static final String ORDER_BY_JPQL = " ORDER BY product.sku ASC";
	public static final String ORDER_BY_SQL = " ORDER BY skilltailor_Product.sku ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.skilltailor.shopping.product.model.Product"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.skilltailor.shopping.product.model.Product"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.skilltailor.shopping.product.model.Product"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DISCOUNT_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long PRODUCTID_COLUMN_BITMASK = 16L;
	public static long SKU_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Product toModel(ProductSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Product model = new ProductImpl();

		model.setProductId(soapModel.getProductId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCategoryId(soapModel.getCategoryId());
		model.setSku(soapModel.getSku());
		model.setProductName(soapModel.getProductName());
		model.setDescription(soapModel.getDescription());
		model.setBasicCost(soapModel.getBasicCost());
		model.setShippingCost(soapModel.getShippingCost());
		model.setTotalQuantity(soapModel.getTotalQuantity());
		model.setMinQuantity(soapModel.getMinQuantity());
		model.setMaxQuantity(soapModel.getMaxQuantity());
		model.setTaxable(soapModel.getTaxable());
		model.setStockChecking(soapModel.getStockChecking());
		model.setDiscount(soapModel.getDiscount());
		model.setImageId(soapModel.getImageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Product> toModels(ProductSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Product> models = new ArrayList<Product>(soapModels.length);

		for (ProductSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.skilltailor.shopping.product.model.Product"));

	public ProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Product.class;
	}

	@Override
	public String getModelClassName() {
		return Product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("productId", getProductId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("categoryId", getCategoryId());
		attributes.put("sku", getSku());
		attributes.put("productName", getProductName());
		attributes.put("description", getDescription());
		attributes.put("basicCost", getBasicCost());
		attributes.put("shippingCost", getShippingCost());
		attributes.put("totalQuantity", getTotalQuantity());
		attributes.put("minQuantity", getMinQuantity());
		attributes.put("maxQuantity", getMaxQuantity());
		attributes.put("taxable", getTaxable());
		attributes.put("stockChecking", getStockChecking());
		attributes.put("discount", getDiscount());
		attributes.put("imageId", getImageId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String sku = (String)attributes.get("sku");

		if (sku != null) {
			setSku(sku);
		}

		String productName = (String)attributes.get("productName");

		if (productName != null) {
			setProductName(productName);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer basicCost = (Integer)attributes.get("basicCost");

		if (basicCost != null) {
			setBasicCost(basicCost);
		}

		Integer shippingCost = (Integer)attributes.get("shippingCost");

		if (shippingCost != null) {
			setShippingCost(shippingCost);
		}

		Integer totalQuantity = (Integer)attributes.get("totalQuantity");

		if (totalQuantity != null) {
			setTotalQuantity(totalQuantity);
		}

		Integer minQuantity = (Integer)attributes.get("minQuantity");

		if (minQuantity != null) {
			setMinQuantity(minQuantity);
		}

		Integer maxQuantity = (Integer)attributes.get("maxQuantity");

		if (maxQuantity != null) {
			setMaxQuantity(maxQuantity);
		}

		Boolean taxable = (Boolean)attributes.get("taxable");

		if (taxable != null) {
			setTaxable(taxable);
		}

		Boolean stockChecking = (Boolean)attributes.get("stockChecking");

		if (stockChecking != null) {
			setStockChecking(stockChecking);
		}

		Double discount = (Double)attributes.get("discount");

		if (discount != null) {
			setDiscount(discount);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_columnBitmask |= PRODUCTID_COLUMN_BITMASK;

		if (!_setOriginalProductId) {
			_setOriginalProductId = true;

			_originalProductId = _productId;
		}

		_productId = productId;
	}

	public long getOriginalProductId() {
		return _originalProductId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@JSON
	@Override
	public String getSku() {
		if (_sku == null) {
			return StringPool.BLANK;
		}
		else {
			return _sku;
		}
	}

	@Override
	public void setSku(String sku) {
		_columnBitmask = -1L;

		if (_originalSku == null) {
			_originalSku = _sku;
		}

		_sku = sku;
	}

	public String getOriginalSku() {
		return GetterUtil.getString(_originalSku);
	}

	@JSON
	@Override
	public String getProductName() {
		if (_productName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productName;
		}
	}

	@Override
	public void setProductName(String productName) {
		_productName = productName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getBasicCost() {
		return _basicCost;
	}

	@Override
	public void setBasicCost(int basicCost) {
		_basicCost = basicCost;
	}

	@JSON
	@Override
	public int getShippingCost() {
		return _shippingCost;
	}

	@Override
	public void setShippingCost(int shippingCost) {
		_shippingCost = shippingCost;
	}

	@JSON
	@Override
	public int getTotalQuantity() {
		return _totalQuantity;
	}

	@Override
	public void setTotalQuantity(int totalQuantity) {
		_totalQuantity = totalQuantity;
	}

	@JSON
	@Override
	public int getMinQuantity() {
		return _minQuantity;
	}

	@Override
	public void setMinQuantity(int minQuantity) {
		_minQuantity = minQuantity;
	}

	@JSON
	@Override
	public int getMaxQuantity() {
		return _maxQuantity;
	}

	@Override
	public void setMaxQuantity(int maxQuantity) {
		_maxQuantity = maxQuantity;
	}

	@JSON
	@Override
	public Boolean getTaxable() {
		return _taxable;
	}

	@Override
	public void setTaxable(Boolean taxable) {
		_taxable = taxable;
	}

	@JSON
	@Override
	public Boolean getStockChecking() {
		return _stockChecking;
	}

	@Override
	public void setStockChecking(Boolean stockChecking) {
		_stockChecking = stockChecking;
	}

	@JSON
	@Override
	public double getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(double discount) {
		_columnBitmask |= DISCOUNT_COLUMN_BITMASK;

		if (!_setOriginalDiscount) {
			_setOriginalDiscount = true;

			_originalDiscount = _discount;
		}

		_discount = discount;
	}

	public double getOriginalDiscount() {
		return _originalDiscount;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Product toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Product)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setProductId(getProductId());
		productImpl.setGroupId(getGroupId());
		productImpl.setCompanyId(getCompanyId());
		productImpl.setUserId(getUserId());
		productImpl.setUserName(getUserName());
		productImpl.setCreateDate(getCreateDate());
		productImpl.setModifiedDate(getModifiedDate());
		productImpl.setCategoryId(getCategoryId());
		productImpl.setSku(getSku());
		productImpl.setProductName(getProductName());
		productImpl.setDescription(getDescription());
		productImpl.setBasicCost(getBasicCost());
		productImpl.setShippingCost(getShippingCost());
		productImpl.setTotalQuantity(getTotalQuantity());
		productImpl.setMinQuantity(getMinQuantity());
		productImpl.setMaxQuantity(getMaxQuantity());
		productImpl.setTaxable(getTaxable());
		productImpl.setStockChecking(getStockChecking());
		productImpl.setDiscount(getDiscount());
		productImpl.setImageId(getImageId());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public int compareTo(Product product) {
		int value = 0;

		value = getSku().compareTo(product.getSku());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Product)) {
			return false;
		}

		Product product = (Product)obj;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductModelImpl productModelImpl = this;

		productModelImpl._originalProductId = productModelImpl._productId;

		productModelImpl._setOriginalProductId = false;

		productModelImpl._originalGroupId = productModelImpl._groupId;

		productModelImpl._setOriginalGroupId = false;

		productModelImpl._originalCompanyId = productModelImpl._companyId;

		productModelImpl._setOriginalCompanyId = false;

		productModelImpl._originalCategoryId = productModelImpl._categoryId;

		productModelImpl._setOriginalCategoryId = false;

		productModelImpl._originalSku = productModelImpl._sku;

		productModelImpl._originalDiscount = productModelImpl._discount;

		productModelImpl._setOriginalDiscount = false;

		productModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Product> toCacheModel() {
		ProductCacheModel productCacheModel = new ProductCacheModel();

		productCacheModel.productId = getProductId();

		productCacheModel.groupId = getGroupId();

		productCacheModel.companyId = getCompanyId();

		productCacheModel.userId = getUserId();

		productCacheModel.userName = getUserName();

		String userName = productCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			productCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			productCacheModel.createDate = createDate.getTime();
		}
		else {
			productCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		productCacheModel.categoryId = getCategoryId();

		productCacheModel.sku = getSku();

		String sku = productCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			productCacheModel.sku = null;
		}

		productCacheModel.productName = getProductName();

		String productName = productCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			productCacheModel.productName = null;
		}

		productCacheModel.description = getDescription();

		String description = productCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			productCacheModel.description = null;
		}

		productCacheModel.basicCost = getBasicCost();

		productCacheModel.shippingCost = getShippingCost();

		productCacheModel.totalQuantity = getTotalQuantity();

		productCacheModel.minQuantity = getMinQuantity();

		productCacheModel.maxQuantity = getMaxQuantity();

		productCacheModel.taxable = getTaxable();

		productCacheModel.stockChecking = getStockChecking();

		productCacheModel.discount = getDiscount();

		productCacheModel.imageId = getImageId();

		return productCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{productId=");
		sb.append(getProductId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", sku=");
		sb.append(getSku());
		sb.append(", productName=");
		sb.append(getProductName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", basicCost=");
		sb.append(getBasicCost());
		sb.append(", shippingCost=");
		sb.append(getShippingCost());
		sb.append(", totalQuantity=");
		sb.append(getTotalQuantity());
		sb.append(", minQuantity=");
		sb.append(getMinQuantity());
		sb.append(", maxQuantity=");
		sb.append(getMaxQuantity());
		sb.append(", taxable=");
		sb.append(getTaxable());
		sb.append(", stockChecking=");
		sb.append(getStockChecking());
		sb.append(", discount=");
		sb.append(getDiscount());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.skilltailor.shopping.product.model.Product");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sku</column-name><column-value><![CDATA[");
		sb.append(getSku());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productName</column-name><column-value><![CDATA[");
		sb.append(getProductName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicCost</column-name><column-value><![CDATA[");
		sb.append(getBasicCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingCost</column-name><column-value><![CDATA[");
		sb.append(getShippingCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalQuantity</column-name><column-value><![CDATA[");
		sb.append(getTotalQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minQuantity</column-name><column-value><![CDATA[");
		sb.append(getMinQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxQuantity</column-name><column-value><![CDATA[");
		sb.append(getMaxQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxable</column-name><column-value><![CDATA[");
		sb.append(getTaxable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stockChecking</column-name><column-value><![CDATA[");
		sb.append(getStockChecking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discount</column-name><column-value><![CDATA[");
		sb.append(getDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Product.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Product.class
		};
	private long _productId;
	private long _originalProductId;
	private boolean _setOriginalProductId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private String _sku;
	private String _originalSku;
	private String _productName;
	private String _description;
	private int _basicCost;
	private int _shippingCost;
	private int _totalQuantity;
	private int _minQuantity;
	private int _maxQuantity;
	private Boolean _taxable;
	private Boolean _stockChecking;
	private double _discount;
	private double _originalDiscount;
	private boolean _setOriginalDiscount;
	private long _imageId;
	private long _columnBitmask;
	private Product _escapedModel;
}